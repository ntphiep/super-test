# services:
#   zookeeper:
#     image: confluentinc/cp-zookeeper:7.4.0
#     container_name: zookeeper
#     ports:
#       - "2181:2181"
#     environment:
#       ZOOKEEPER_CLIENT_PORT: 2181
#       # ZOOKEEPER_SERVER_ID: 1
#       # ZOOKEEPER_SERVERS: zoo1:2888:3888
#       ZOOKEEPER_TICK_TIME: 2000
#     networks:
#       - kafka-network
      
#   # kafka1:
#   #   image: confluentinc/cp-server:7.4.0
#   #   container_name: kafka1
#   #   ports:
#   #     - "9092:9092"
#   #     - "29092:29092"
#   #   environment:
#   #     KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
#   #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
#   #     KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
#   #     KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
#   #     KAFKA_BROKER_ID: 1
#   #     KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
#   #     KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
#   #     KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
#   #   networks:
#   #     - kafka-network
      

#   # kafka2:
#   #   image: confluentinc/cp-server:7.4.0
#   #   container_name: kafka2
#   #   ports:
#   #     - "9093:9093"
#   #     - "29093:29093"
#   #   environment:
#   #     KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:19093,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093,DOCKER://host.docker.internal:29093
#   #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
#   #     KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
#   #     KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
#   #     KAFKA_BROKER_ID: 2
#   #     KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
#   #     KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
#   #     KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
#   #   networks:
#   #     - kafka-network
      

#   # kafka3:
#   #   image: confluentinc/cp-server:7.4.0
#   #   container_name: kafka3
#   #   ports:
#   #     - "9094:9094"
#   #     - "29094:29094"
#   #   environment:
#   #     KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka3:19094,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9094,DOCKER://host.docker.internal:29094
#   #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
#   #     KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
#   #     KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
#   #     KAFKA_BROKER_ID: 3
#   #     KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
#   #     KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
#   #     KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
#   #   networks:
#   #     - kafka-network
      

#   # kafka-connect:
#   #   image: confluentinc/cp-kafka-connect:7.4.0
#   #   container_name: kafka-connect
#   #   ports:
#   #     - "8083:8083"
#   #   environment:
#   #     CONNECT_BOOTSTRAP_SERVERS: kafka1:19092,kafka2:19093,kafka3:19094
#   #     CONNECT_REST_PORT: 8083
#   #     CONNECT_GROUP_ID: compose-connect-group
#   #     CONNECT_CONFIG_STORAGE_TOPIC: compose-connect-configs
#   #     CONNECT_OFFSET_STORAGE_TOPIC: compose-connect-offsets
#   #     CONNECT_STATUS_STORAGE_TOPIC: compose-connect-status
#   #     CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
#   #     CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.storage.StringConverter
#   #     CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
#   #     CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
#   #     CONNECT_REST_ADVERTISED_HOST_NAME: 'kafka-connect'
#   #     CONNECT_LOG4J_ROOT_LOGLEVEL: 'INFO'
#   #     CONNECT_LOG4J_LOGGERS: 'org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR'
#   #     CONNECT_PLUGIN_PATH: '/usr/share/java,/usr/share/confluent-hub-components'
#   #   networks:
#   #     - kafka-network
      

#   # schema-registry:
#   #   image: confluentinc/cp-schema-registry:7.4.0
#   #   container_name: schema-registry
#   #   ports:
#   #     - "8081:8081"
#   #   environment:
#   #     SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka1:19092,kafka2:19093,kafka3:19094
#   #     SCHEMA_REGISTRY_HOST_NAME: schema-registry
#   #     SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
#   #   networks:
#   #     - kafka-network
      

#   # kafka-ui:
#   #   container_name: kafka-ui
#   #   image: provectuslabs/kafka-ui:latest
#   #   ports:
#   #     - 8888:8080
#   #   depends_on:
#   #     - kafka1
#   #     - kafka2
#   #     - kafka3
#   #     - schema-registry
#   #     - kafka-connect
#   #   environment:
#   #     KAFKA_CLUSTERS_0_NAME: local
#   #     KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: PLAINTEXT://kafka1:19092,PLAINTEXT_HOST://kafka1:19092
#   #     KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
#   #     KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: connect
#   #     KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://kafka-connect:8083
#   #     DYNAMIC_CONFIG_ENABLED: 'true'
#   #   networks:
#   #     - kafka-network
#   #     
  
#   # control-center:
#   #   image: confluentinc/cp-enterprise-control-center:7.4.0
#   #   hostname: control-center
#   #   container_name: control-center
#   #   restart: on-failure
#   #   depends_on:
#   #     schema-registry:
#   #       condition: service_healthy
#   #   ports:
#   #     - "9021:9021"
#   #   environment:
#   #     CONTROL_CENTER_BOOTSTRAP_SERVERS: kafka1:19092,kafka2:19093,kafka3:19094
#   #     CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
#   #     CONTROL_CENTER_REPLICATION_FACTOR: 1
#   #     CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
#   #     CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
#   #     CONFLUENT_METRICS_TOPIC_REPLICATION: 1
#   #     CONFLIENT_METRICS_ENABLE: 'false'
#   #     PORT: 9021
#   #   networks:
#   #     - kafka-network
      
#   broker:
#     image: confluentinc/cp-server:7.4.0
#     hostname: broker
#     container_name: broker
#     depends_on:
#       - zookeeper
#     ports:
#       - "9092:9092"
#       - "9101:9101"
#     environment:
#       KAFKA_BROKER_ID: 1
#       KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
#       KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#       KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
#       KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
#       KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#       KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
#       KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
#       KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
#       KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#       KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#       KAFKA_JMX_PORT: 9101
#       KAFKA_JMX_HOSTNAME: localhost
#       KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
#       CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
#       CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
#       CONFLUENT_METRICS_ENABLE: 'false'
#       CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
#     networks:
#       - kafka-network
#     # healthcheck:
#     #   test: [ "CMD", "bash", "-c", 'nc -z localhost 9092' ]
#     #   interval: 10s
#     #   timeout: 5s
#     #   retries: 5

#   schema-registry:
#     image: confluentinc/cp-schema-registry:7.4.0
#     hostname: schema-registry
#     container_name: schema-registry
#     depends_on:
#       - broker
#     ports:
#       - "8081:8081"
#     environment:
#       SCHEMA_REGISTRY_HOST_NAME: schema-registry
#       SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
#       SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
#     networks:
#       - kafka-network
#     # healthcheck:
#     #   test: [ "CMD", "curl", "-f", "http://localhost:8081/" ]
#     #   interval: 30s
#     #   timeout: 10s
#     #   retries: 5
      
#   control-center:
#     image: confluentinc/cp-enterprise-control-center:7.4.0
#     hostname: control-center
#     container_name: control-center
#     depends_on:
#       broker:
#         condition: service_healthy
#       schema-registry:
#         condition: service_healthy
#     ports:
#       - "9021:9021"
#     environment:
#       CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
#       CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
#       CONTROL_CENTER_REPLICATION_FACTOR: 1
#       CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
#       CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
#       CONFLUENT_METRICS_TOPIC_REPLICATION: 1
#       CONFLIENT_METRICS_ENABLE: 'false'
#       PORT: 9021
#     networks:
#       - kafka-network
#     healthcheck:
#       test: [ "CMD", "curl", "-f", "http://localhost:9021/health" ]
#       interval: 30s
#       timeout: 10s
#       retries: 5
  
#   kafka-connect:
#     image: confluentinc/cp-kafka-connect:7.4.0
#     container_name: kafka-connect
#     depends_on:
#       - broker
#       - schema-registry
#     ports:
#       - "8083:8083"
#     # command:
#     #   - bash
#     #   - -c
#     #   - |
#     #     echo "Installing JDBC driver"
#     #     confluent-hub install --no-prompt confluentinc/kafka-connect-jdbc:10.2.0
#     #     confluent-hub install --no-prompt confluentinc/kafka-connect-s3:10.2.0
#     #     confluent-hub install --no-prompt debezium/debezium-connector-mysql:1.7.0
#     environment:
#       CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
#       CONNECT_REST_PORT: 8083
#       CONNECT_GROUP_ID: compose-connect-group
#       CONNECT_CONFIG_STORAGE_TOPIC: compose-connect-configs
#       CONNECT_OFFSET_STORAGE_TOPIC: compose-connect-offsets
#       CONNECT_STATUS_STORAGE_TOPIC: compose-connect-status
#       CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
#       CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
#       CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
#       CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
#       CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.storage.StringConverter
#       CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
#       CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
#       CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
#       CONNECT_REST_ADVERTISED_HOST_NAME: 'kafka-connect'
#       CONNECT_LOG4J_ROOT_LOGLEVEL: 'INFO'
#       CONNECT_LOG4J_LOGGERS: 'org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR'
#       CONNECT_PLUGIN_PATH: '/usr/share/java,/usr/share/confluent-hub-components'
#     networks:
#       - kafka-network

# networks: 
#   kafka-network:
#     driver: bridge



# ------------------------------------------------

---
version: '3.9'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.4.0
    container_name: broker
    depends_on:
      - zookeeper
    ports:
    # "`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-
    # An important note about accessing Kafka from clients on other machines:
    # -----------------------------------------------------------------------
    #
    # The config used here exposes port 9092 for _external_ connections to the broker
    # i.e. those from _outside_ the docker network. This could be from the host machine
    # running docker, or maybe further afield if you've got a more complicated setup.
    # If the latter is true, you will need to change the value 'localhost' in
    # KAFKA_ADVERTISED_LISTENERS to one that is resolvable to the docker host from those
    # remote clients
    #
    # For connections _internal_ to the docker network, such as from other services
    # and components, use broker:29092.
    #
    # See https://rmoff.net/2018/08/02/kafka-listeners-explained/ for details
    # "`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-
    #
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100

  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    container_name: schema-registry
    ports:
      - "8081:8081"
    depends_on:
      - broker
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "broker:29092"

  kafka-connect:
    image: confluentinc/cp-kafka-connect-base:7.4.0
    container_name: kafka-connect
    depends_on:
      - broker
      - schema-registry
    ports:
      - 8083:8083
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "broker:29092"
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: kafka-connect
      CONNECT_CONFIG_STORAGE_TOPIC: _connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: _connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: _connect-status
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_LOG4J_APPENDER_STDOUT_LAYOUT_CONVERSIONPATTERN: "[%d] %p %X{connector.context}%m (%c:%L)%n"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
    #  ---------------
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components,/data/connect-jars
    # If you want to use the Confluent Hub installer to d/l component, but make them available
    # when running this offline, spin up the stack once and then run : 
    #   docker cp kafka-connect:/usr/share/confluent-hub-components ./data/connect-jars
    volumes:
      - $PWD/data:/data
    # In the command section, $ are replaced with $$ to avoid the error 'Invalid interpolation format for "command" option'
    command:
      - bash
      - -c
      - |
        echo "Installing Connector"
        confluent-hub install --no-prompt debezium/debezium-connector-mysql:1.7.0
        confluent-hub install --no-prompt confluentinc/kafka-connect-elasticsearch:11.1.3
        confluent-hub install --no-prompt neo4j/kafka-connect-neo4j:2.0.0
        #
        echo "Launching Kafka Connect worker"
        /etc/confluent/docker/run &
        #
        sleep infinity

  ksqldb:
    # *-----------------------------*
    # To connect to ksqlDB CLI
    #   docker exec --interactive --tty ksqldb ksql http://localhost:8088
    # *-----------------------------*
    image: confluentinc/ksqldb-server:0.29.0
    container_name: ksqldb
    depends_on:
      - broker
      - schema-registry
    ports:
      - "8088:8088"
    environment:
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: broker:29092
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KSQL_STREAMS_PRODUCER_MAX_BLOCK_MS: 9223372036854775807
      KSQL_KSQL_CONNECT_URL: http://kafka-connect:8083
      KSQL_KSQL_SERVICE_ID: confluent_rmoff_01
      KSQL_KSQL_HIDDEN_TOPICS: '^_.*'

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.4.0
    container_name: control-center
    depends_on:
      - broker
      - schema-registry
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "broker:29092"
      CONTROL_CENTER_CONNECT_CONNECT_CLUSTER: "kafka-connect:8083"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_KSQL_KSQLDB_URL: "http://ksqldb:8088"
      # The advertised URL needs to be the URL on which the browser
      #  can access the KSQL server (e.g. http://localhost:8088/info)
      CONTROL_CENTER_KSQL_KSQLDB_ADVERTISED_URL: "http://localhost:8088"
      # -v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v
      # Useful settings for development/laptop use - modify as needed for Prod
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_COMMAND_TOPIC_REPLICATION: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_REPLICATION: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_INTERNAL_TOPICS_REPLICATION: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONTROL_CENTER_STREAMS_NUM_STREAM_THREADS: 1
      CONTROL_CENTER_STREAMS_CACHE_MAX_BYTES_BUFFERING: 104857600
    command:
      - bash
      - -c 
      - |
        echo "Waiting three minutes for Kafka brokers to start and necessary topics to be available"
        sleep 180  
        /etc/confluent/docker/run
